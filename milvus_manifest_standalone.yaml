---
# Source: milvus/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "vectordb-minio"
  namespace: "default"
  labels:
    app: minio
    chart: minio-8.0.17
    release: "vectordb"
---
# Source: milvus/charts/pulsarv3/templates/autorecovery-service-account.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "vectordb-pulsarv3-recovery"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: recovery
  annotations:
---
# Source: milvus/charts/pulsarv3/templates/bookkeeper-service-account.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "vectordb-pulsarv3-bookie"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: bookie
  annotations:
---
# Source: milvus/charts/pulsarv3/templates/broker-service-account.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "vectordb-pulsarv3-broker-acct"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: broker
  annotations:
---
# Source: milvus/charts/pulsarv3/templates/proxy-service-account.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "vectordb-pulsarv3-proxy"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: proxy
  annotations:
---
# Source: milvus/charts/pulsarv3/templates/zookeeper-service-account.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "vectordb-pulsarv3-zookeeper"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: zookeeper
  annotations:
---
# Source: milvus/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: vectordb-minio
  labels:
    app: minio
    chart: minio-8.0.17
    release: vectordb
    heritage: Helm
type: Opaque
data:
  accesskey: "bWluaW9hZG1pbg=="
  secretkey: "bWluaW9hZG1pbg=="
---
# Source: milvus/charts/minio/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: vectordb-minio
  labels:
    app: minio
    chart: minio-8.0.17
    release: vectordb
    heritage: Helm
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"

    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }

    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
      VERSIONING=$4

      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi

      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi


      # set versioning for bucket
      if [ ! -z $VERSIONING ] ; then
        if [ $VERSIONING = true ] ; then
            echo "Enabling versioning for '$BUCKET'"
            ${MC} version enable myminio/$BUCKET
        elif [ $VERSIONING = false ] ; then
            echo "Suspending versioning for '$BUCKET'"
            ${MC} version suspend myminio/$BUCKET
        fi
      else
          echo "Bucket '$BUCKET' versioning unchanged."
      fi

      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} policy set $POLICY myminio/$BUCKET
    }

    # Try connecting to Minio instance
    scheme=http
    connectToMinio $scheme
---
# Source: milvus/charts/pulsarv3/templates/autorecovery-configmap.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "vectordb-pulsarv3-recovery"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: recovery
data:
  # common config
  zkServers: "vectordb-pulsarv3-zookeeper:2181"
  zkLedgersRootPath: "/ledgers"
  # enable bookkeeper http server
  httpServerEnabled: "true"
  httpServerPort: "8000"
  # config the stats provider
  statsProviderClass: org.apache.bookkeeper.stats.prometheus.PrometheusMetricsProvider
  # use hostname as the bookie id
  useHostNameAsBookieID: "true"
  BOOKIE_MEM: |
    -Xms128m -Xmx128m
  PULSAR_PREFIX_useV2WireProtocol: "true"
---
# Source: milvus/charts/pulsarv3/templates/bookkeeper-configmap.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "vectordb-pulsarv3-bookie"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: bookie
data:
  # common config
  zkServers: "vectordb-pulsarv3-zookeeper:2181"
  zkLedgersRootPath: "/ledgers"
  # enable bookkeeper http server
  httpServerEnabled: "true"
  httpServerPort: "8000"
  # config the stats provider
  statsProviderClass: org.apache.bookkeeper.stats.prometheus.PrometheusMetricsProvider
  # use hostname as the bookie id
  useHostNameAsBookieID: "true"
  # disable auto recovery on bookies since we will start AutoRecovery in separated pods
  autoRecoveryDaemonEnabled: "false"
  # Do not retain journal files as it increase the disk utilization
  journalMaxBackups: "0"
  journalDirectories: "/pulsar/data/bookkeeper/journal"
  PULSAR_PREFIX_journalDirectories: "/pulsar/data/bookkeeper/journal"
  ledgerDirectories: "/pulsar/data/bookkeeper/ledgers"
  # TLS config

  PULSAR_GC: |
    -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=4 -XX:ConcGCThreads=4 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB -XX:+ExitOnOutOfMemoryError -XX:+PerfDisableSharedMem
  PULSAR_MEM: |
    -Xms4096m -Xmx4096m -XX:MaxDirectMemorySize=8192m
  diskCheckInterval: "1800"
  diskUsageLwmThreshold: "0.85"
  diskUsageThreshold: "0.95"
  diskUsageWarnThreshold: "0.9"
  gcWaitTime: "300000"
  isForceGCAllowWhenNoSpace: "true"
  majorCompactionInterval: "10800"
  majorCompactionThreshold: "0.8"
  minorCompactionInterval: "360"
  minorCompactionThreshold: "0.2"
  nettyMaxFrameSizeBytes: "104867840"
---
# Source: milvus/charts/pulsarv3/templates/broker-configmap.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "vectordb-pulsarv3-broker"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: broker
data:
  # Metadata settings
  zookeeperServers: "vectordb-pulsarv3-zookeeper:2181"
  configurationStoreServers: "vectordb-pulsarv3-zookeeper:2181"
  # Broker settings
  clusterName: vectordb-pulsarv3
  exposeTopicLevelMetricsInPrometheus: "true"
  numHttpServerThreads: "8"
  zooKeeperSessionTimeoutMillis: "30000"
  statusFilePath: "/pulsar/status"
  # Tiered storage settings

  # Function Worker Settings
  # function worker configuration
  functionsWorkerEnabled: "false"
  # prometheus needs to access /metrics endpoint
  webServicePort: "8080"
  brokerServicePort: "6650"
  # Authentication Settings
  PULSAR_GC: |
    -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -Dio.netty.leakDetectionLevel=disabled -Dio.netty.recycler.linkCapacity=1024 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=4 -XX:ConcGCThreads=4 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB -XX:+ExitOnOutOfMemoryError -XX:+PerfDisableSharedMem
  PULSAR_MEM: |
    -Xms4096m -Xmx4096m -XX:MaxDirectMemorySize=8192m
  backlogQuotaDefaultLimitGB: "8"
  backlogQuotaDefaultRetentionPolicy: producer_exception
  defaultRetentionSizeInMB: "-1"
  defaultRetentionTimeInMinutes: "10080"
  managedLedgerDefaultAckQuorum: "2"
  managedLedgerDefaultEnsembleSize: "3"
  managedLedgerDefaultWriteQuorum: "3"
  maxMessageSize: "104857600"
  subscriptionExpirationTimeMinutes: "3"
  ttlDurationDefaultInSeconds: "259200"
---
# Source: milvus/charts/pulsarv3/templates/proxy-configmap.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "vectordb-pulsarv3-proxy"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: proxy
data:
  clusterName: vectordb-pulsarv3
  statusFilePath: "/pulsar/status"
  # prometheus needs to access /metrics endpoint
  webServicePort: "8080"
  servicePort: "6650"
  brokerServiceURL: pulsar://vectordb-pulsarv3-broker:6650
  brokerWebServiceURL: http://vectordb-pulsarv3-broker:8080
  # Authentication Settings
  PULSAR_GC: |
    -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -Dio.netty.leakDetectionLevel=disabled -Dio.netty.recycler.linkCapacity=1024 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=4 -XX:ConcGCThreads=4 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB -XX:+ExitOnOutOfMemoryError -XX:+PerfDisableSharedMem
  PULSAR_MEM: |
    -Xms512m -Xmx512m -XX:MaxDirectMemorySize=2048m
  httpNumThreads: "8"
# Source: milvus/charts/pulsarv3/templates/zookeeper-configmap.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
# deploy zookeeper only when `components.zookeeper` is true
apiVersion: v1
kind: ConfigMap
metadata:
  name: "vectordb-pulsarv3-zookeeper"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: zookeeper
data:
  dataDir: /pulsar/data/zookeeper
  PULSAR_PREFIX_serverCnxnFactory: org.apache.zookeeper.server.NIOServerCnxnFactory
  serverCnxnFactory: org.apache.zookeeper.server.NIOServerCnxnFactory
  PULSAR_GC: |
    -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -Dcom.sun.management.jmxremote -Djute.maxbuffer=10485760 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+DoEscapeAnalysis -XX:+DisableExplicitGC -XX:+ExitOnOutOfMemoryError -XX:+PerfDisableSharedMem
  PULSAR_MEM: |
    -Xms256m -Xmx256m
---
# Source: milvus/templates/configmap.yaml
# If customConfigMap is not set, this ConfigMap will be redendered.
apiVersion: v1
kind: ConfigMap
metadata:
  name: vectordb-milvus
  namespace: default
data:
  default.yaml: |
    # Copyright (C) 2019-2021 Zilliz. All rights reserved.
    #
    # Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance
    # with the License. You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software distributed under the License
    # is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
    # or implied. See the License for the specific language governing permissions and limitations under the License.

    etcd:
      endpoints:
      - vectordb-etcd-0.vectordb-etcd-headless.default.svc.cluster.local:2379

    metastore:
      type: etcd

    minio:
      address: vectordb-minio
      port: 9000
      accessKeyID: minioadmin
      secretAccessKey: minioadmin
      useSSL: false
      bucketName: milvus-bucket
      rootPath: file
      useIAM: false
      useVirtualHost: false

    mq:
      type: pulsar

    messageQueue: pulsar

    pulsar:
      address: vectordb-pulsarv3-proxy
      port: 6650
      maxMessageSize: 104857600

    mq:
      type: rocksmq

    messageQueue: rocksmq

    rootCoord:
      address: localhost
      port: 53100
      enableActiveStandby: false  # Enable rootcoord active-standby

    proxy:
      port: 19530
      internalPort: 19529

    queryCoord:
      address: localhost
      port: 19531

      enableActiveStandby: false  # Enable querycoord active-standby

    queryNode:
      port: 21123
      enableDisk: true # Enable querynode load disk index, and search on disk index

    indexCoord:
      address: localhost
      port: 31000
      enableActiveStandby: false  # Enable indexcoord active-standby

    indexNode:
      port: 21121
      enableDisk: true # Enable index node build disk vector index

    dataCoord:
      address: localhost
      port: 13333
      enableActiveStandby: false  # Enable datacoord active-standby

    dataNode:
      port: 21124

    log:
      level: info
      file:
        rootPath: ""
        maxSize: 300
        maxAge: 10
        maxBackups: 20
      format: text
  user.yaml: |-
    #    For example enable rest http for milvus proxy
    #    proxy:
    #      http:
    #        enabled: true
    ##  Enable tlsMode and set the tls cert and key
    #  tls:
    #    serverPemPath: /etc/milvus/certs/tls.crt
    #    serverKeyPath: /etc/milvus/certs/tls.key
    #   common:
    #     security:
    #       tlsMode: 1
    common:
      security:
        authorizationEnabled: true
---
# Source: milvus/charts/minio/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vectordb-minio
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: minio
    chart: minio-8.0.17
    release: vectordb
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "500Gi"
---
# Source: milvus/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vectordb-milvus
  namespace: default
  annotations:
    helm.sh/resource-policy: keep
  labels:
    helm.sh/chart: milvus-4.2.32
    app.kubernetes.io/name: milvus
    app.kubernetes.io/instance: vectordb
    app.kubernetes.io/version: "2.5.0-beta"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: 50Gi
---
# Source: milvus/charts/pulsarv3/templates/broker-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "vectordb-pulsarv3-broker-role"
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
rules:
  - apiGroups: [""]
    resources:
      - configmaps
    verbs: ["get", "list", "watch"]
  - apiGroups: ["", "extensions", "apps"]
    resources:
      - pods
      - services
      - deployments
      - secrets
      - statefulsets
    verbs:
      - list
      - watch
      - get
      - update
      - create
      - delete
      - patch
---
# Source: milvus/charts/pulsarv3/templates/broker-cluster-role-binding.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
## TODO create our own cluster role with less privledges than admin
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "vectordb-pulsarv3-broker-rolebinding"
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "vectordb-pulsarv3-broker-role"
subjects:
  - kind: ServiceAccount
    name: "vectordb-pulsarv3-broker-acct"
    namespace: default
---
# Source: milvus/charts/etcd/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: vectordb-etcd-headless
  namespace: default
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-6.3.3
    app.kubernetes.io/instance: vectordb
    app.kubernetes.io/managed-by: Helm
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: "client"
      port: 2379
      targetPort: client
    - name: "peer"
      port: 2380
      targetPort: peer
  selector:
    app.kubernetes.io/name: etcd
    app.kubernetes.io/instance: vectordb
---
# Source: milvus/charts/etcd/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: vectordb-etcd
  namespace: default
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-6.3.3
    app.kubernetes.io/instance: vectordb
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: "client"
      port: 2379
      targetPort: client
      nodePort: null
    - name: "peer"
      port: 2380
      targetPort: peer
      nodePort: null
  selector:
    app.kubernetes.io/name: etcd
    app.kubernetes.io/instance: vectordb
---
# Source: milvus/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vectordb-minio
  labels:
    app: minio
    chart: minio-8.0.17
    release: vectordb
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
    release: vectordb
---
# Source: milvus/charts/pulsarv3/templates/autorecovery-service.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: Service
metadata:
  name: "vectordb-pulsarv3-recovery"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: recovery
spec:
  ports:
    - name: http
      port: 8000
  clusterIP: None
  selector:
    app: pulsarv3
    release: vectordb
    component: recovery
---
# Source: milvus/charts/pulsarv3/templates/bookkeeper-service.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: Service
metadata:
  name: "vectordb-pulsarv3-bookie"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: bookie
spec:
  ports:
    - name: "bookie"
      port: 3181
    - name: http
      port: 8000
  clusterIP: None
  selector:
    app: pulsarv3
    release: vectordb
    component: bookie
  publishNotReadyAddresses: true
---
# Source: milvus/charts/pulsarv3/templates/broker-service.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: Service
metadata:
  name: "vectordb-pulsarv3-broker"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: broker
  annotations: {}
spec:
  ports:
    # prometheus needs to access /metrics endpoint
    - name: http
      port: 8080
    - name: "pulsar"
      port: 6650
  clusterIP: None
  selector:
    app: pulsarv3
    release: vectordb
    component: broker
---
# Source: milvus/charts/pulsarv3/templates/proxy-service.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: Service
metadata:
  name: "vectordb-pulsarv3-proxy"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: proxy
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: sts-http
    - name: "pulsar"
      port: 6650
      protocol: TCP
      targetPort: "sts-pulsar"
  selector:
    app: pulsarv3
    release: vectordb
    component: proxy
# Source: milvus/charts/pulsarv3/templates/zookeeper-service.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
# deploy zookeeper only when `components.zookeeper` is true
apiVersion: v1
kind: Service
metadata:
  name: "vectordb-pulsarv3-zookeeper"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: zookeeper
  annotations: {}
spec:
  ports:
    # prometheus needs to access /metrics endpoint
    - name: http
      port: 8000
    - name: "follower"
      port: 2888
    - name: "leader-election"
      port: 3888
    - name: "client"
      port: 2181
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: pulsarv3
    release: vectordb
    component: zookeeper
---
# Source: milvus/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vectordb-milvus
  namespace: default
  labels:
    helm.sh/chart: milvus-4.2.32
    app.kubernetes.io/name: milvus
    app.kubernetes.io/instance: vectordb
    app.kubernetes.io/version: "2.5.0-beta"
    app.kubernetes.io/managed-by: Helm
    component: "standalone"
spec:
  type: ClusterIP
  ports:
    - name: milvus
      port: 19530
      protocol: TCP
      targetPort: milvus
    - name: metrics
      protocol: TCP
      port: 9091
      targetPort: metrics
  selector:
    app.kubernetes.io/name: milvus
    app.kubernetes.io/instance: vectordb
    component: "standalone"
---
# Source: milvus/charts/minio/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vectordb-minio
  labels:
    app: minio
    chart: minio-8.0.17
    release: vectordb
    heritage: Helm
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: minio
      release: vectordb
  template:
    metadata:
      name: vectordb-minio
      labels:
        app: minio
        release: vectordb
      annotations:
        checksum/secrets: 434f26a7879bc3c2e251488808a6ff48733619f9426bab903cff7e68261e97bd
        checksum/config: 74ba8d8540b0f5f09a6a722f9f7e388e3f8b60121c9ce0ccb145888e1c4c2781
    spec:
      serviceAccountName: "vectordb-minio"
      securityContext: {}
      containers:
        - name: minio
          image: "minio/minio:RELEASE.2023-03-20T20-16-18Z"
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-ce"
            - "/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export"
          volumeMounts:
            - name: export
              mountPath: /export
          ports:
            - name: http
              containerPort: 9000
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          startupProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 60
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: vectordb-minio
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: vectordb-minio
                  key: secretkey
          resources:
            requests:
              memory: 2Gi
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: export
          persistentVolumeClaim:
            claimName: vectordb-minio
        - name: minio-user
          secret:
            secretName: vectordb-minio
---
# Source: milvus/templates/standalone-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vectordb-milvus-standalone
  namespace: default
  labels:
    helm.sh/chart: milvus-4.2.32
    app.kubernetes.io/name: milvus
    app.kubernetes.io/instance: vectordb
    app.kubernetes.io/version: "2.5.0-beta"
    app.kubernetes.io/managed-by: Helm
    component: "standalone"
  annotations:
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: milvus
      app.kubernetes.io/instance: vectordb
      component: "standalone"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: milvus
        app.kubernetes.io/instance: vectordb
        component: "standalone"
      annotations:
        checksum/config: 2d4c94ca157f7405275fd58c42167286d6d331c0c734024c1427fc53ab70510f
    spec:
      serviceAccountName: default
      initContainers:
      containers:
        - name: standalone
          image: "milvusdb/milvus:v2.4.12"
          imagePullPolicy: IfNotPresent
          args: ["milvus", "run", "standalone"]
          ports:
            - name: milvus
              containerPort: 19530
              protocol: TCP
            - name: metrics
              containerPort: 9091
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: metrics
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: metrics
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          resources: {}
          env:
          volumeMounts:
            - mountPath: /milvus/tools
              name: tools
            - name: milvus-config
              mountPath: /milvus/configs/default.yaml
              subPath: default.yaml
              readOnly: true
            - name: milvus-config
              mountPath: /milvus/configs/user.yaml
              subPath: user.yaml
              readOnly: true
            - name: milvus-data-disk
              mountPath: "/var/lib/milvus"
              subPath:
            - mountPath: /var/lib/milvus/data
              name: disk
      volumes:
        - emptyDir: {}
          name: tools
        - name: milvus-config
          configMap:
            name: vectordb-milvus
        - name: milvus-data-disk
          persistentVolumeClaim:
            claimName: vectordb-milvus
        - name: disk
          emptyDir: {}
---
# Source: milvus/charts/etcd/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vectordb-etcd
  namespace: default
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-6.3.3
    app.kubernetes.io/instance: vectordb
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: etcd
      app.kubernetes.io/instance: vectordb
  serviceName: vectordb-etcd-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: etcd
        helm.sh/chart: etcd-6.3.3
        app.kubernetes.io/instance: vectordb
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: etcd
                    app.kubernetes.io/instance: vectordb
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
      securityContext: {}
      serviceAccountName: "default"
      containers:
        - name: etcd
          image: docker.io/milvusdb/etcd:3.5.14-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            allowPrivilegeEscalation: false
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ETCDCTL_API
              value: "3"
            - name: ETCD_ON_K8S
              value: "yes"
            - name: ETCD_START_FROM_SNAPSHOT
              value: "no"
            - name: ETCD_DISASTER_RECOVERY
              value: "no"
            - name: ETCD_NAME
              value: "$(MY_POD_NAME)"
            - name: ETCD_DATA_DIR
              value: "/bitnami/etcd/data"
            - name: ETCD_LOG_LEVEL
              value: "info"
            - name: ALLOW_NONE_AUTHENTICATION
              value: "yes"
            - name: ETCD_ADVERTISE_CLIENT_URLS
              value: "http://$(MY_POD_NAME).vectordb-etcd-headless.default.svc.cluster.local:2379"
            - name: ETCD_LISTEN_CLIENT_URLS
              value: "http://0.0.0.0:2379"
            - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
              value: "http://$(MY_POD_NAME).vectordb-etcd-headless.default.svc.cluster.local:2380"
            - name: ETCD_LISTEN_PEER_URLS
              value: "http://0.0.0.0:2380"
            - name: ETCD_AUTO_COMPACTION_MODE
              value: "revision"
            - name: ETCD_AUTO_COMPACTION_RETENTION
              value: "1000"
            - name: ETCD_QUOTA_BACKEND_BYTES
              value: "4294967296"
            - name: ETCD_HEARTBEAT_INTERVAL
              value: "500"
            - name: ETCD_ELECTION_TIMEOUT
              value: "2500"
          envFrom:
          ports:
            - name: client
              containerPort: 2379
              protocol: TCP
            - name: peer
              containerPort: 2380
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /opt/bitnami/scripts/etcd/healthcheck.sh
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - /opt/bitnami/scripts/etcd/healthcheck.sh
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/etcd
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "10Gi"
---
# Source: milvus/charts/pulsarv3/templates/autorecovery-statefulset.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "vectordb-pulsarv3-recovery"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: recovery
spec:
  serviceName: "vectordb-pulsarv3-recovery"
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  # nodeSelector:
  selector:
    matchLabels:
      app: pulsarv3
      release: vectordb
      component: recovery
  template:
    metadata:
      labels:
        app: pulsarv3
        release: vectordb
        cluster: vectordb-pulsarv3
        component: recovery
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
    spec:
      affinity:
      terminationGracePeriodSeconds: 30
      serviceAccountName: "vectordb-pulsarv3-recovery"
      initContainers:
        # This initContainer will wait for bookkeeper initnewcluster to complete
        # before deploying the bookies
        - name: pulsar-bookkeeper-verify-clusterid
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 0.1
              memory: 256Mi
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/bookkeeper.conf;until bin/bookkeeper shell whatisinstanceid; do




                sleep 3;
              done;

          envFrom:
            - configMapRef:
                name: "vectordb-pulsarv3-recovery"
          volumeMounts:
      containers:
        - name: "vectordb-pulsarv3-recovery"
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 0.1
              memory: 128Mi
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/bookkeeper.conf;

              OPTS="${OPTS} -Dlog4j2.formatMsgNoLookups=true" exec bin/bookkeeper autorecovery

          ports:
            - name: http
              containerPort: 8000
          envFrom:
            - configMapRef:
                name: "vectordb-pulsarv3-recovery"
          volumeMounts:
      volumes:
---
# Source: milvus/charts/pulsarv3/templates/bookkeeper-statefulset.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "vectordb-pulsarv3-bookie"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: bookie
spec:
  serviceName: "vectordb-pulsarv3-bookie"
  replicas: 3
  selector:
    matchLabels:
      app: pulsarv3
      release: vectordb
      component: bookie
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: pulsarv3
        release: vectordb
        cluster: vectordb-pulsarv3
        component: bookie
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
    spec:
      affinity:
      terminationGracePeriodSeconds: 30
      serviceAccountName: "vectordb-pulsarv3-bookie"
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
      initContainers:
        # This initContainer will wait for bookkeeper initnewcluster to complete
        # before deploying the bookies
        - name: pulsar-bookkeeper-verify-clusterid
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 0.1
              memory: 256Mi
          command: ["sh", "-c"]
          args:
            # only reformat bookie if bookkeeper is running without persistence
            - >
              set -e; bin/apply-config-from-env.py conf/bookkeeper.conf;until bin/bookkeeper shell whatisinstanceid; do




                sleep 3;
              done;

          envFrom:
            - configMapRef:
                name: "vectordb-pulsarv3-bookie"
          volumeMounts:
      containers:
        - name: "vectordb-pulsarv3-bookie"
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/v1/bookie/state
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 60
          readinessProbe:
            httpGet:
              path: /api/v1/bookie/is_ready
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 60
          resources:
            requests:
              cpu: 0.5
              memory: 2048Mi
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/bookkeeper.conf;

              OPTS="${OPTS} -Dlog4j2.formatMsgNoLookups=true" exec bin/pulsar bookie;

          ports:
            - name: "bookie"
              containerPort: 3181
            - name: http
              containerPort: 8000
          envFrom:
            - configMapRef:
                name: "vectordb-pulsarv3-bookie"
          volumeMounts:
            - name: "vectordb-pulsarv3-bookie-journal"
              mountPath: /pulsar/data/bookkeeper/journal
            - name: "vectordb-pulsarv3-bookie-ledgers"
              mountPath: /pulsar/data/bookkeeper/ledgers
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: "vectordb-pulsarv3-bookie-journal"
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 100Gi
    - metadata:
        name: "vectordb-pulsarv3-bookie-ledgers"
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 200Gi
---
# Source: milvus/charts/pulsarv3/templates/broker-statefulset.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "vectordb-pulsarv3-broker"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: broker
spec:
  serviceName: "vectordb-pulsarv3-broker"
  replicas: 2
  selector:
    matchLabels:
      app: pulsarv3
      release: vectordb
      component: broker
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: pulsarv3
        release: vectordb
        cluster: vectordb-pulsarv3
        component: broker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: "vectordb-pulsarv3-broker-acct"
      affinity:
      terminationGracePeriodSeconds: 30
      initContainers:
        # This init container will wait for zookeeper to be ready before
        # deploying the bookies
        - name: wait-zookeeper-ready
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 0.1
              memory: 256Mi
          command: ["sh", "-c"]
          args:
            - >-
              export BOOKIE_MEM="-Xmx128M"; until bin/bookkeeper org.apache.zookeeper.ZooKeeperMain -server vectordb-pulsarv3-zookeeper:2181 get /admin/clusters/vectordb-pulsarv3; do




                echo "pulsar cluster vectordb-pulsarv3 isn't initialized yet ... check in 3 seconds ..." && sleep 3;
              done;
          volumeMounts:
        # This init container will wait for bookkeeper to be ready before
        # deploying the broker
        - name: wait-bookkeeper-ready
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 0.1
              memory: 256Mi
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/bookkeeper.conf; export BOOKIE_MEM="-Xmx128M"; until bin/bookkeeper shell whatisinstanceid; do




                echo "bookkeeper cluster is not initialized yet. backoff for 3 seconds ...";
                sleep 3;
              done; echo "bookkeeper cluster is already initialized"; bookieServiceNumber="$(nslookup -timeout=10 vectordb-pulsarv3-bookie | grep Name | wc -l)"; until [ ${bookieServiceNumber} -ge 3 ]; do




                echo "bookkeeper cluster vectordb-pulsarv3 isn't ready yet ... check in 10 seconds ...";
                sleep 10;
                bookieServiceNumber="$(nslookup -timeout=10 vectordb-pulsarv3-bookie | grep Name | wc -l)";
              done; echo "bookkeeper cluster is ready";

          envFrom:
            - configMapRef:
                name: "vectordb-pulsarv3-bookie"
          volumeMounts:
      containers:
        - name: "vectordb-pulsarv3-broker"
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /status.html
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /status.html
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10
          resources:
            requests:
              cpu: 0.5
              memory: 2048Mi
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/broker.conf; bin/gen-yml-from-env.py conf/functions_worker.yml; echo "OK" > status;

              bin/pulsar zookeeper-shell -server vectordb-pulsarv3-zookeeper:2181 get /loadbalance/brokers/${HOSTNAME}.vectordb-pulsarv3-broker.default.svc.cluster.local:8080; while [ $? -eq 0 ]; do




                echo "broker ${HOSTNAME}.vectordb-pulsarv3-broker.default.svc.cluster.local znode still exists ... check in 10 seconds ...";
                sleep 10;
                bin/pulsar zookeeper-shell -server vectordb-pulsarv3-zookeeper:2181 get /loadbalance/brokers/${HOSTNAME}.vectordb-pulsarv3-broker.default.svc.cluster.local:8080;
              done; cat conf/pulsar_env.sh; OPTS="${OPTS} -Dlog4j2.formatMsgNoLookups=true" exec bin/pulsar broker;

          ports:
            # prometheus needs to access /metrics endpoint
            - name: http
              containerPort: 8080
            - name: "pulsar"
              containerPort: 6650
          envFrom:
            - configMapRef:
                name: "vectordb-pulsarv3-broker"
          volumeMounts:
          env:
      volumes:
---
# Source: milvus/charts/pulsarv3/templates/proxy-statefulset.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "vectordb-pulsarv3-proxy"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: proxy
spec:
  serviceName: "vectordb-pulsarv3-proxy"
  replicas: 2
  selector:
    matchLabels:
      app: pulsarv3
      release: vectordb
      component: proxy
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: pulsarv3
        release: vectordb
        cluster: vectordb-pulsarv3
        component: proxy
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
    spec:
      affinity:
      terminationGracePeriodSeconds: 30
      serviceAccountName: "vectordb-pulsarv3-proxy"
      initContainers:
        # This init container will wait for zookeeper to be ready before
        # deploying the bookies
        - name: wait-zookeeper-ready
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 0.1
              memory: 256Mi
          command: ["sh", "-c"]
          args:
            - >-
              export PULSAR_MEM="-Xmx128M"; until bin/pulsar zookeeper-shell -server vectordb-pulsarv3-zookeeper get /admin/clusters/vectordb-pulsarv3; do




                sleep 3;
              done;
        # This init container will wait for at least one broker to be ready before
        # deploying the proxy
        - name: wait-broker-ready
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 0.1
              memory: 256Mi
          command: ["sh", "-c"]
          args:
            - >-
              set -e; brokerServiceNumber="$(nslookup -timeout=10 vectordb-pulsarv3-broker | grep Name | wc -l)"; until [ ${brokerServiceNumber} -ge 1 ]; do




                echo "pulsar cluster vectordb-pulsarv3 isn't initialized yet ... check in 10 seconds ...";
                sleep 10;
                brokerServiceNumber="$(nslookup -timeout=10 vectordb-pulsarv3-broker | grep Name | wc -l)";
              done;
      containers:
        - name: "vectordb-pulsarv3-proxy"
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /status.html
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /status.html
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10
          resources:
            requests:
              cpu: 0.5
              memory: 1024Mi
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/proxy.conf && echo "OK" > status && OPTS="${OPTS} -Dlog4j2.formatMsgNoLookups=true" exec bin/pulsar proxy

          ports:
            # prometheus needs to access /metrics endpoint
            - name: sts-http
              containerPort: 8080
            - name: "sts-pulsar"
              containerPort: 6650
          envFrom:
            - configMapRef:
                name: "vectordb-pulsarv3-proxy"
# Source: milvus/charts/pulsarv3/templates/zookeeper-statefulset.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
# deploy zookeeper only when `components.zookeeper` is true
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "vectordb-pulsarv3-zookeeper"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: zookeeper
spec:
  serviceName: "vectordb-pulsarv3-zookeeper"
  replicas: 3
  selector:
    matchLabels:
      app: pulsarv3
      release: vectordb
      component: zookeeper
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: pulsarv3
        release: vectordb
        cluster: vectordb-pulsarv3
        component: zookeeper
      annotations:
    spec:
      affinity:
      terminationGracePeriodSeconds: 30
      serviceAccountName: "vectordb-pulsarv3-zookeeper"
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: "vectordb-pulsarv3-zookeeper"
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 0.2
              memory: 256Mi
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/zookeeper.conf;

              bin/generate-zookeeper-config.sh conf/zookeeper.conf; OPTS="${OPTS} -Dlog4j2.formatMsgNoLookups=true" exec bin/pulsar zookeeper;

          ports:
            # prometheus needs to access /metrics endpoint
            - name: http
              containerPort: 8000
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: leader-election
              containerPort: 3888
          env:
            - name: ZOOKEEPER_SERVERS
              value: vectordb-pulsarv3-zookeeper-0,vectordb-pulsarv3-zookeeper-1,vectordb-pulsarv3-zookeeper-2
            - name: EXTERNAL_PROVIDED_SERVERS
              value: "false"
          envFrom:
            - configMapRef:
                name: "vectordb-pulsarv3-zookeeper"
          readinessProbe:
            exec:
              command:
                - timeout
                - "30"
                - bash
                - -c
                - 'echo ruok | nc -q 1 localhost 2181 | grep imok'
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 30
            failureThreshold: 10
          livenessProbe:
            exec:
              command:
                - timeout
                - "30"
                - bash
                - -c
                - 'echo ruok | nc -q 1 localhost 2181 | grep imok'
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 30
            failureThreshold: 10
          volumeMounts:
            - name: "vectordb-pulsarv3-zookeeper-data"
              mountPath: /pulsar/data
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: "vectordb-pulsarv3-zookeeper-data"
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 20Gi
---
# Source: milvus/charts/pulsarv3/templates/bookkeeper-cluster-initialize.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: batch/v1
kind: Job
metadata:
  name: "vectordb-pulsarv3-bookie-init"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: "bookie-init"
spec:
  # This feature was previously behind a feature gate for several Kubernetes versions and will default to true in 1.23 and beyond
  # https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/
  template:
    spec:
      serviceAccountName: "vectordb-pulsarv3-bookie"
      nodeSelector:
      tolerations:
      initContainers:
        - name: wait-zookeeper-ready
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 0.1
              memory: 256Mi
          command: ["sh", "-c"]
          args:
            - >-
              until nslookup vectordb-pulsarv3-zookeeper-2.vectordb-pulsarv3-zookeeper.default; do




                sleep 3;
              done;
      containers:
        - name: "vectordb-pulsarv3-bookie-init"
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/bookkeeper.conf;

              export BOOKIE_MEM="-Xmx128M"; if bin/bookkeeper shell whatisinstanceid; then




                  echo "bookkeeper cluster already initialized";
              else




                  bin/bookkeeper shell initnewcluster;
              fi

          envFrom:
            - configMapRef:
                name: "vectordb-pulsarv3-bookie"
          volumeMounts:
      volumes:
      restartPolicy: OnFailure
---
# Source: milvus/charts/pulsarv3/templates/pulsar-cluster-initialize.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: batch/v1
kind: Job
metadata:
  name: "vectordb-pulsarv3-pulsar-init"
  namespace: default
  labels:
    app: pulsarv3
    chart: pulsarv3-3.3.0
    release: vectordb
    heritage: Helm
    cluster: vectordb-pulsarv3
    component: pulsar-init
spec:
  # This feature was previously behind a feature gate for several Kubernetes versions and will default to true in 1.23 and beyond
  # https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/
  template:
    spec:
      initContainers:
        - name: wait-zookeeper-ready
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 0.1
              memory: 256Mi
          command: ["sh", "-c"]
          args:
            - >-
              until nslookup vectordb-pulsarv3-zookeeper-2.vectordb-pulsarv3-zookeeper.default; do




                sleep 3;
              done;
        # This initContainer will wait for bookkeeper initnewcluster to complete
        # before initializing pulsar metadata
        - name: pulsar-bookkeeper-verify-clusterid
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 0.1
              memory: 256Mi
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/bookkeeper.conf; echo Default BOOKIE_MEM settings are set very high, which can cause the init container to fail.; echo Setting the memory to a lower value to avoid OOM as operations below are not memory intensive.; export BOOKIE_MEM="-Xmx128M";

              until bin/bookkeeper shell whatisinstanceid; do




                sleep 3;
              done;

          envFrom:
            - configMapRef:
                name: "vectordb-pulsarv3-bookie"
          volumeMounts:
      containers:
        - name: "vectordb-pulsarv3-pulsar-init"
          image: "apachepulsar/pulsar:3.0.7"
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - |
              export PULSAR_MEM="-Xmx128M";
              bin/pulsar initialize-cluster-metadata \
                --cluster vectordb-pulsarv3 \
                --zookeeper vectordb-pulsarv3-zookeeper:2181 \
                --configuration-store vectordb-pulsarv3-zookeeper:2181 \
                --web-service-url http://vectordb-pulsarv3-broker.default.svc.cluster.local:8080/ \
                --web-service-url-tls https://vectordb-pulsarv3-broker.default.svc.cluster.local:8443/ \
                --broker-service-url pulsar://vectordb-pulsarv3-broker.default.svc.cluster.local:6650/ \
                --broker-service-url-tls pulsar+ssl://vectordb-pulsarv3-broker.default.svc.cluster.local:6651/ ;
          volumeMounts:
      volumes:
      restartPolicy: OnFailure
# Source: milvus/charts/pulsarv3/templates/autorecovery-podmonitor.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

---

